name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.B2_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.B2_APP_KEY }}
  AWS_DEFAULT_REGION: us-east-005
  AWS_REGION: us-east-005
  AWS_S3_USE_PATH_STYLE: "true"
  AWS_ENDPOINT_URL: https://s3.us-east-005.backblazeb2.com
  AWS_ENDPOINT_URL_S3: https://s3.us-east-005.backblazeb2.com
  S3_BUCKET: 4gmXev0u4Um

jobs:
  # A) PURGE THE BUCKET
  purge-bucket:
    runs-on: ubuntu-latest
    steps:
      - name: Preflight S3 auth (Backblaze)
        run: |
          set -euxo pipefail
          aws --version
          aws s3api head-bucket --bucket "$S3_BUCKET" \
            --endpoint-url "$AWS_ENDPOINT_URL_S3" --region "$AWS_DEFAULT_REGION"

      # 1) Best-effort normal delete
      - name: Purge (simple recursive delete)
        run: |
          set -euxo pipefail
          aws s3 rm "s3://$S3_BUCKET" \
            --recursive \
            --endpoint-url "$AWS_ENDPOINT_URL_S3" \
            --region "$AWS_DEFAULT_REGION"

      # 2) DEEP PURGE: remove ANY lingering versions & delete markers
      - name: Purge (remove all versions & delete-markers)
        run: |
          set -euxo pipefail

          # paginate list-object-versions and delete in batches of 1000
          while true; do
            JSON=$(aws s3api list-object-versions \
              --bucket "$S3_BUCKET" \
              --endpoint-url "$AWS_ENDPOINT_URL_S3" \
              --region "$AWS_DEFAULT_REGION" \
              --max-items 1000)

            IDS=$(echo "$JSON" | jq -c '[ 
              ( .Versions // [] | map({Key:.Key, VersionId:.VersionId}) ) + 
              ( .DeleteMarkers // [] | map({Key:.Key, VersionId:.VersionId}) ) 
            ]')

            # nothing to delete?
            if [ "$(echo "$IDS" | jq 'length')" -eq 0 ]; then
              break
            fi

            echo "$IDS" | jq '{Objects: ., Quiet: false}' > /tmp/delete.json

            aws s3api delete-objects \
              --bucket "$S3_BUCKET" \
              --delete file:///tmp/delete.json \
              --endpoint-url "$AWS_ENDPOINT_URL_S3" \
              --region "$AWS_DEFAULT_REGION"
          done

      - name: Verify empty
        run: |
          set -euxo pipefail
          echo "List (s3):"
          aws s3 ls "s3://$S3_BUCKET" \
            --endpoint-url "$AWS_ENDPOINT_URL_S3" \
            --region "$AWS_DEFAULT_REGION" || true

          echo "List (API):"
          aws s3api list-objects-v2 \
            --bucket "$S3_BUCKET" \
            --endpoint-url "$AWS_ENDPOINT_URL_S3" \
            --region "$AWS_DEFAULT_REGION" \
            --query 'Contents' || true

  # B) macOS build & upload
  build-macos:
    needs: purge-bucket
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Build app (TS + Vite)
        run: pnpm build

      - name: Build (macOS universal)
        run: pnpm electron-builder --mac dmg zip --universal --publish never

      - name: Show artifacts
        run: |
          set -euxo pipefail
          if [ -d release ]; then
            find release -maxdepth 2 -type f | sed 's/^/ - /'
          else
            echo "No release/ directory"; exit 1
          fi

      # Upload binaries first…
      - name: Upload macOS binaries (DMG/ZIP + blockmap)
        run: |
          set -euxo pipefail
          aws s3 cp "release/" "s3://$S3_BUCKET/" \
            --recursive \
            --endpoint-url "$AWS_ENDPOINT_URL_S3" \
            --region "$AWS_DEFAULT_REGION" \
            --acl public-read \
            --exclude "*" \
            --include "*-mac-universal.dmg" \
            --include "*-mac-universal.zip" \
            --include "*-mac-universal.zip.blockmap"

      # …then upload manifest last
      - name: Upload macOS manifest (latest-mac.yml)
        run: |
          set -euxo pipefail
          aws s3 cp "release/latest-mac.yml" "s3://$S3_BUCKET/latest-mac.yml" \
            --endpoint-url "$AWS_ENDPOINT_URL_S3" \
            --region "$AWS_DEFAULT_REGION" \
            --acl public-read

  # C) Windows build & upload
  build-windows:
    needs: purge-bucket
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install deps
        run: pnpm install --no-frozen-lockfile
        shell: bash

      - name: Build app (TS + Vite)
        run: pnpm build
        shell: bash

      - name: Build (Windows x64)
        run: pnpm electron-builder --win nsis zip --x64 --publish never
        shell: bash

      - name: Show artifacts
        shell: pwsh
        run: |
          if (Test-Path release) {
            Get-ChildItem -Recurse -File release | Select-Object FullName, Length | Format-Table -AutoSize
          } else {
            Write-Error "No release/ directory"; exit 1
          }

      # Upload binaries first…
      - name: Upload Windows binaries (EXE + blockmap)
        shell: pwsh
        run: |
          aws s3 cp "release/" "s3://$Env:S3_BUCKET/" `
            --recursive `
            --endpoint-url "$Env:AWS_ENDPOINT_URL_S3" `
            --region "$Env:AWS_DEFAULT_REGION" `
            --acl public-read `
            --exclude "*" `
            --include "*.exe" `
            --include "*.exe.blockmap"

      # …then upload manifest last
      - name: Upload Windows manifest (latest.yml)
        shell: pwsh
        run: |
          aws s3 cp "release/latest.yml" "s3://$Env:S3_BUCKET/latest.yml" `
            --endpoint-url "$Env:AWS_ENDPOINT_URL_S3" `
            --region "$Env:AWS_DEFAULT_REGION" `
            --acl public-read
